'use client'

import { useEffect, type ComponentProps } from "react";

import Link from "next/link";
import Image from "next/image";

import Banner from "./(assets)/banner.png";
import InterfaceHover from "./(assets)/interface-hover.png";
import TypeHover from "./(assets)/type-hover.png";

import AliasedTypeCannotBeAnObjectLiteral from "./mdx/aliased-type-cannot-be-an-object-literal.mdx";
import TypeWithImplements from "./mdx/a-class-may-only-implement-another-class-or-interface.mdx";
import InterfaceDeclarationMerging from "./mdx/interface-declaration-merging.mdx";
import TypeDeclarationMerging from "./mdx/type-declaration-merging.mdx";
import InterfaceWithUnions from "./mdx/interface-with-unions.mdx";
import DerivedTypesWithType from "./mdx/derived-types-with-type.mdx";
import DerivedTypesWithInterface from "./mdx/derived-types-with-interface.mdx";
import InterfacesWithDerivedPropertyTypes from "./mdx/interfaces-with-derived-property-types.mdx";
import TypesHasImplicitIndexSignature from "./mdx/types-has-implicit-index-signature.mdx";
import InterfacesDoesNotHaveImplicitIndexSignature from "./mdx/interfaces-does-not-has-implicit-index-signature.mdx";
import InterfaceWithExplicitIndexSignature from "./mdx/interface-with-explicit-index-signature.mdx";
import TypeWithSamePropertyIntersected from "./mdx/type-with-same-property-intersected.mdx";
import InterfaceWithSamePropertyIntersected from "./mdx/interface-with-same-property-intersected.mdx";
import PreferExtendsOverIntersections from "./mdx/prefer-extends-over-intersections.mdx";
import TypeWithThis from "./mdx/type-with-this.mdx";
import FluentApiWithInterface from "./mdx/fluent-api-with-interface.mdx";
import MixinsWithInterface from "./mdx/mixins-with-interface.mdx";
import ThisInProperty from "./mdx/this-in-property.mdx";
import ManuallyTypingProperty from "./mdx/manually-typing-property.mdx";
import ThisAndUnknown from "./mdx/this-and-unknown.mdx";
import UnknownAndIntersections from "./mdx/unknown-and-intersections.mdx";
import FunctionsWithInterface from "./mdx/functions-with-interface.mdx";

import { AsideNavigationMenu } from "../(shared)/components/ui/aside-navigation-menu";
import { useState } from "react";
import { useScrollSpy } from "@/hooks/article-progress";
import { JsonLd } from "../(shared)/components/core/json-ld";
import { Breadcrumbs } from "../(shared)/components/ui/breadcrumbs";
import { ArticleMeta } from "../(shared)/components/ui/article-meta";

export default function Home() {
  const navigationItems = [
    {
      href: "o-comeco-de-tudo",
      title: "O come√ßo de tudo",
    },
    {
      href: "interfaces-so-podem-definir-objetos-types-podem-definir-qualquer-tipo",
      title:
        "Interfaces s√≥ podem definir objetos, types podem definir qualquer tipo",
    },
    {
      href: "hover-em-type-vs-em-interface",
      title: "Hover em type vs em interface",
    },
    {
      href: "interfaces-podem-ser-redeclaradas-types-nao",
      title: "Interfaces podem ser redeclaradas, types n√£o",
    },
    {
      href: "interfaces-nao-podem-ser-utilizadas-para-criar-tipos-derivados",
      title: "Interfaces n√£o podem ser utilizadas para criar tipos derivados",
    },
    {
      href: "interfaces-se-comportam-de-maneira-diferente-de-types-ao-compor-objetos",
      title:
        "Interfaces se comportam de maneira diferente de types ao compor objetos",
    },
    {
      href: "types-tem-assinatura-implicita-de-indice",
      title: "Types t√™m assinatura impl√≠cita de √≠ndice",
    },
    {
      href: "interfaces-tem-melhor-performance-do-que-types-ao-compor-varios-objetos",
      title:
        "Interfaces t√™m melhor performance do que types ao compor v√°rios objetos",
    },
    {
      href: "interfaces-tem-this",
      title: `Interfaces t√™m ${"this"}`,
    },
    {
      href: "qual-usar",
      title: "Usar type ou interface?",
    },
    {
      href: "consideracoes-finais",
      title: "Considera√ß√µes finais",
    },
  ] as const satisfies ComponentProps<
    typeof AsideNavigationMenu
  >["navigationItems"];

  const { activeItemIndex } = useScrollSpy()

  const articleMeta: ComponentProps<typeof ArticleMeta> = {
    title: "Type vs interface",
    description:
      "Voc√™ vai se surpreender com o que encontrei sobre Type Vs Interface. Olha esse artigo! ü§Ø",
    createdAt: "01/04/2025",
    readingTime: "10 min de leitura",
    coverImage: Banner,
    coverAlt: "TypeScript: Type vs Interface",
  };

  const breadcrumbItems: ComponentProps<typeof Breadcrumbs>["items"] = [
    { label: "Home", href: "/" },
    { label: "Type vs interface" },
  ];

  return (
    <>
      <main className="flex col-span-12 sm:col-span-9 py-8">
        <article className="flex flex-col gap-4 px-4 sm:pr-12 pl-6 xl:pl-0 max-w-full">
          <Breadcrumbs items={breadcrumbItems} className="mb-6" />

          <ArticleMeta
            description={articleMeta.description}
            title={articleMeta.title}
            createdAt={articleMeta.createdAt}
            readingTime={articleMeta.readingTime}
            coverImage={articleMeta.coverImage}
            coverAlt={articleMeta.coverAlt}
            className="mb-6"
          />

          <p>
            Sim, √© mais um artigo sobre type vs interface, quando usar cada um e
            etc, mas eu te prometo que esse vai ser diferente de todos que voc√™
            j√° viu, exploraremos t√≥picos b√°sicos {"(que muitos j√° sabem)"} e at√©
            os mais avan√ßados {"(que poucos sabem)"}. Tamb√©m iremos ir um pouco
            mais longe e voltar no tempo, assim entenderemos que essa d√∫vida nem
            sempre existiu, por pelo menos dois motivos.
          </p>
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id="o-comeco-de-tudo"
          >
            {navigationItems[0].title}
          </h4>
          <p>
            Um ponto que sempre √© importante ao olhar pro typescript √© analisar
            a sua hist√≥ria, muitas pessoas apenas usam features e pensam que
            aquilo sempre existiu, mas at√© mesmo as coisas que mais fazem
            sentido e parecem mais √≥bvias n√£o existiam at√© um tempo atr√°s, e o
            ponto √© justamente esse, a keyword &quot;type&quot; para declara√ß√£o
            de tipos foi lan√ßada apenas na&nbsp;
            <Link
              className="underline underline-offset-4"
              href="https://devblogs.microsoft.com/typescript/announcing-typescript-1-4/"
              target="_blank"
            >
              vers√£o 1.4 do typescript&nbsp;
            </Link>
            {"(6 vers√µes ap√≥s a primeira vers√£o)"}.
          </p>
          <p>
            Enquanto isso, interfaces sempre existiram. Voc√™ provavelmente sabe
            que interfaces s√≥ podem definir objetos&nbsp;
            {"(se n√£o sabe, n√£o tem problema, discorreremos sobre logo logo)"},
            sendo assim, como defin√≠amos strings literais, tipos condicionais e
            etc? Simples, isso nem existia ainda, a cria√ß√£o da keyword type
            possibilitou a adi√ß√£o de outras v√°rias features.
          </p>
          <p>
            Esse √© o primeiro motivo da d√∫vida n√£o existir antigamente. E o
            segundo motivo? Bom, acontece que a ideia era que types fossem
            usados para definir v√°rios tipos diferentes como tuplas, unions,
            fun√ß√µes, arrays, e etc, mas N√ÉO objetos literais&nbsp;
            {"(assim como fazemos em interfaces)"}, na primeira implementa√ß√£o da
            keyword type,&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/pull/957#issuecomment-60690671"
              className="underline underline-offset-4"
              target="_blank"
            >
              usar type para objetos literais geraria uma mensagem de erro.
            </Link>
          </p>
          <AliasedTypeCannotBeAnObjectLiteral />
          <p>
            Dessa forma seria tranquilo decidir qual usar ou n√£o, precisa
            definir objetos? Use&nbsp;
            <span className="text-highlight pl-px">interface</span>, pro resto,
            use <span className="text-highlight pl-px">type</span>, a ideia por
            tr√°s disso era justamente evitar confus√£o, mas isso acabou mudando.
          </p>
          <p>
            Ap√≥s investigar, n√£o consegui reproduzir a mensagem de erro acima,
            ent√£o presumo que antes da vers√£o 1.4 ser oficialmente lan√ßada, isso
            foi removido.
          </p>
          <p>
            Ali√°s, aqui est√° a&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/pull/957"
              target="_blank"
              className="underline underline-offset-4"
            >
              pull request
            </Link>
            &nbsp;da implementa√ß√£o da keyword&nbsp;
            <span className="text-highlight px-px">type, </span>bem como a&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/pull/1025"
              target="_blank"
              className="underline underline-offset-4"
            >
              pull request
            </Link>
            &nbsp;que permite que types sejam usados para definir objetos
            literais, e tamb√©m a&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/pull/998"
              target="_blank"
              className="underline underline-offset-4"
            >
              discuss√£o
            </Link>
            &nbsp;desse tema.&nbsp;
          </p>
          <p>
            Show, entendemos a hist√≥ria por tr√°s disso tudo, mas e agora? Nos
            sobra uma d√∫vida, qual usar? O pr√≥prio time do typescript documentou
            algumas diferen√ßas entre&nbsp;
            <Link
              href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"
              target="_blank"
              className="underline underline-offset-4"
            >
              type vs interface
            </Link>
            , mas com certeza n√£o todas elas, agora finalmente entraremos no
            assunto, explicarei as diferen√ßas, come√ßaremos com as diferen√ßas
            mais b√°sicas e iremos at√© as mais avan√ßadas.
          </p>
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[1].href}
          >
            {navigationItems[1].title}
          </h4>
          <p>
            Essa √© uma das principais diferen√ßas, interfaces servem
            exclusivamente pra declarar objetos, e objetos podem ter m√©todos e
            propriedades, j√° types podem fazer o mesmo, mas tamb√©m podem definir
            qualquer outro tipo, como arrays, tuplas, unions, fun√ß√µes, tipos
            literais, mapped types, e at√© tipos primitivos como string, number,
            boolean, date, etc.
          </p>
          <p>
            Um ponto que vale a ressalva √© que interfaces n√£o podem estender
            unions, mesma que seja uma union de objetos, afinal, o que ter√≠amos
            como resultado final seria uma union.
          </p>
          <InterfaceWithUnions />
          <p>
            Outro ponto de aten√ß√£o √© que talvez voc√™ tenha visto em sites como
            stackoverflow ou em artigos que apenas interfaces e classes poderiam
            ser usadas como contrato de uma classe, usar type geraria um erro.
          </p>
          <TypeWithImplements />
          <p>
            Mas isso √© parcialmente verdade, at√© a vers√£o 2.1 do typescript usar
            type realmente geraria um erro, nas vers√µes seguintes ambas as
            keywords type e interface servem pra definir contratos e serem
            utilizadas com implements.
          </p>
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[2].href}
          >
            {navigationItems[2].title}
          </h4>
          <p>
            A primeira diferen√ßa visual que podemos notar √© que o hover em
            interface e o hover em type s√£o diferentes, enquanto o hover na
            interface mostra apenas o nome da interface, em type √© mostrado o
            tipo definido e tamb√©m o seu nome.
          </p>
          <div className="flex flex-col gap-2 md:gap-4 items-center xl:justify-between xl:flex-row">
            <Image
              src={InterfaceHover}
              alt="Hover em interface mostra apenas o seu nome"
              className="w-11/12"
            />
            <span className="text-2xl font-medium font-mono">VS</span>
            <Image
              src={TypeHover}
              alt="Hover em type mostra seu nome e tamb√©m o tipo definido"
              className="w-11/12"
            />
          </div>
          <p className="text-start">
            Criando um tipo usando interface √© como se estiv√©ssemos criando um
            tipo novo. Por exemplo, se algo √© do tipo&nbsp;
            <span className="text-highlight">String</span>&nbsp;
            {"(com letra mai√∫scula, estamos falando do constructor)"}, o que
            voc√™ ver√° no hover √© apenas o nome&nbsp;
            <span className="text-highlight">String</span>&nbsp;
            {"(at√© mesmo porque"}&nbsp;
            <span className="text-highlight">String</span>&nbsp;
            {"√© implementado usando interface)"}&nbsp;e n√£o todos os m√©todos e
            propriedades que <span className="text-highlight">String</span> tem.
          </p>
          <p>
            J√° usando type, √© como se estiv√©ssemos criando apenas um&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/pull/957#issuecomment-60464140"
              target="_blank"
              className="underline underline-offset-4 mr-px"
            >
              alias
            </Link>
            , pra um tipo que pode ser an√¥nimo ou n√£o.
          </p>

          <p>
            Uma outra pequena diferen√ßa visual √© como interfaces e types se
            comportam em mensagens de erro, voc√™ pode conferir isso nesse{" "}
            <Link
              href="https://www.typescriptlang.org/play/?#code/PTAEGEHsFsAcEsA2BTATqNrLusgzngIYDm+oA7koqIYuYQJ56gCueyoAUCKAC4AWHAHaFcoSADMaQ0PCG80EwgGNkALk6c5C1EtWgAsqOi1QAb06groEbjWg8vVHOKcAvpokshy3vEgyyMr8kEbQJogAFND2YREAlOaW1soBeJAoAHSIkMTRmbbI8e6aPMiZxJmgACqCGKhY6ABGyDnkFFQ0dIzMbBwCwqIccabcYLyQoKjIEmh8kwN8DLAc5PzwwbLMyAAeK77IACYaQSEjUWY2Q-YAjABMAMwALA+gbsVjNXW8yxySoAADaAA0CCaZbPh1XYqXgOIY0ZgmcK0AA0nyaLFhhGY8F4AHJmEJILCWsgZId4NNfIgGFdcIcUTVfgBlZTOWC8T7kAJ42G4eT+GS42QyRaYbCgXAEEguTzeXyCjDBSAAQSE8Ai0Xsl0K9kcziExDeiQs1lAqSE6SyOTy0AKQ2KHk4p1V6s1OuuoHuzwArMagA"
              className="underline underline-offset-4"
              target="_blank"
            >
              playground.
            </Link>
          </p>

          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[3].href}
          >
            {navigationItems[3].title}
          </h4>
          <p>
            Interfaces podem ser declaradas m√∫ltiplas vezes e o TypeScript vai
            automaticamente mesclar essas declara√ß√µes, como se fosse uma √∫nica
            interface. Esse processo √© chamado de &apos;declaration
            merging&apos;.
          </p>
          <InterfaceDeclarationMerging />
          <p>
            J√° usando type, redeclarar ir√° gerar um erro, isso ocorre porque o
            type √© tratado como um alias para um tipo espec√≠fico (como
            mencionado no t√≥pico acima) e, uma vez definido, n√£o pode ser
            modificado ou estendido atrav√©s de uma nova declara√ß√£o.
          </p>
          <TypeDeclarationMerging />
          <p>
            Esse comportamento de &apos;declaration merging&apos; pode ou n√£o
            ser um problema, a depender do seu cen√°rio. Mas geralmente definir
            um tipo novamente com o mesmo nome tende a ser um erro n√£o
            proposital, falaremos mais sobre em breve.
          </p>
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[4].href}
          >
            {navigationItems[4].title}
          </h4>
          <p>
            Uma das coisas que sempre digo √© que quanto menos tipos manualmente
            voc√™ escrever, melhor. Pra isso, constantemente uso e recomendo
            tipos derivados, que geralmente v√™m de um valor j√° existente em
            runtime, atrav√©s do operador&nbsp;
            <span className="text-highlight">typeof</span>, essa abordagem √©
            menos suscet√≠vel a erros, reduz a quantidade de c√≥digo escrito e
            deixa o c√≥digo mais contundente (tema pra um pr√≥ximo artigo üëÄ).
          </p>
          <DerivedTypesWithType />
          <p>
            O problema √© que outra limita√ß√£o da keyword interface √© que ela n√£o
            pode ser usada para representar tipos derivados, mesmo que esse tipo
            seja um objeto.
          </p>
          <DerivedTypesWithInterface />
          <p>
            H√° uma&nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/issues/31843"
              target="_blank"
              className="underline underline-offset-4"
            >
              issue aberta
            </Link>
            &nbsp;no reposit√≥rio do typescript que apesar de n√£o citar
            exatamente o operador&nbsp;
            <span className="text-highlight">typeof</span>&nbsp;como no exemplo,
            segue um princ√≠pio parecido, esperan√ßosamente algum dia express√µes
            como essa ser√£o permitidas em interfaces, mas atualmente, n√£o
            funcionam.
          </p>
          <p>
            E um disclaimer importante e talvez √≥bvio: voc√™ pode usar
            normalmente&nbsp;<span className="text-highlight">typeof</span>
            &nbsp;em propriedades de interfaces, s√≥ n√£o na defini√ß√£o delas.
          </p>
          <InterfacesWithDerivedPropertyTypes />
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[5].href}
          >
            {navigationItems[5].title}
          </h4>
          <p>
            Podemos compor objetos de formas diferentes, usando a keyword type,
            precisamos utilizar o operador &apos;&&apos;, que cria uma
            interse√ß√£o, j√° com interface, utilizamos a keyword
            &apos;extends&apos;.
          </p>
          <p>
            Apesar de prop√≥sitos parecidos, existe uma diferen√ßa entre
            &apos;&&apos; e &apos;extends&apos;, ao compor objetos, uma
            interse√ß√£o cria um novo objeto, sem fazer nenhuma compara√ß√£o de
            compatibilidade de tipos das propriedades, em casos em que dois ou
            mais objetos possuem uma propriedade com o mesmo nome, os seus tipos
            ser√£o interseccionados, e isso frequentemente resulta em never.
          </p>
          <TypeWithSamePropertyIntersected />
          <p>
            J√° com interfaces, as propriedades com os mesmos nomes precisam ter
            os mesmos tipos. Na maioria dos casos, esse comportamento √©
            especialmente √∫til, mas depende do seu cen√°rio.
          </p>
          <InterfaceWithSamePropertyIntersected />
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2x text-start"
            id={navigationItems[6].href}
          >
            {navigationItems[6].title}
          </h4>
          <p>
            Um comportamento sutil que difere entre type e interface √© que types
            t√™m assinatura impl√≠cita de √≠ndice, e interfaces n√£o, pergunta: h√°
            algum erro no c√≥digo abaixo?
          </p>
          <TypesHasImplicitIndexSignature />
          <p>
            Se disse que &apos;n√£o&apos;, ent√£o voc√™ acertou! Faz sentido, a
            vari√°vel &apos;test&apos; deve ser um objeto que tem propriedades e
            valores do tipo string, e a vari√°vel &apos;user&apos; √© atribu√≠vel a
            isso.
          </p>
          <p>
            Mas e se mud√°ssemos a declara√ß√£o de &apos;User&apos; para usarmos
            interface ao inv√©s de type?
          </p>
          <InterfacesDoesNotHaveImplicitIndexSignature />
          <p>
            Obter√≠amos um erro, estranho, n√©? Lembra que mencionei que
            interfaces podem ser redeclaradas? √â esse o causador desse erro, o
            TypeScript sabe que essa interface pode ser redeclarada, e por isso
            n√£o necessariamente ela s√≥ ter√° propriedades e valores do tipo
            string, logo, nenhuma assinatura de √≠ndice √© definida
            implicitamente.
          </p>
          <p>
            Podemos resolver isso usando uma assinatura expl√≠cita de √≠ndice, mas
            isso faria com que a interface tamb√©m aceitasse outras propriedades
            al√©m da propriedade &apos;name&apos;.
          </p>
          <InterfaceWithExplicitIndexSignature />
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[7].href}
          >
            {navigationItems[7].title}
          </h4>
          <p>
            O TypeScript foi projetado para que as interfaces sejam verificadas
            de maneira mais otimizada, √© prefer√≠vel que usemos interface para
            compor v√°rios objetos ao inv√©s de type, por quest√µes de performance,
            j√° que as rela√ß√µes entre interfaces s√£o cacheadas, inclusive essa
            performance melhor em interfaces √© algo documentado pelo pr√≥prio
            time do typescript, e voc√™ pode ver mais sobre isso na &nbsp;
            <Link
              href="https://github.com/microsoft/TypeScript/wiki/Performance#preferring-interfaces-over-intersections"
              target="_blank"
              className="underline underline-offset-4"
            >
              wiki do typescript
            </Link>
            .
          </p>
          <PreferExtendsOverIntersections />
          <p>
            Em resumo, quando temos uma interse√ß√£o com mais de 2 objetos, essa
            diferen√ßa de performance come√ßa a ser mais significante, e pra isso
            ser um problema √© algo que precisa acontecer v√°rias vezes, n√£o
            precisa ir refatorar suas interse√ß√µes para usar interfaces (ainda),
            mas faz bem levar isso em conta ao escolher entre um ou outro.
          </p>
          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[8].href}
          >
            {navigationItems[8].title}
          </h4>
          <p>
            Chegamos na minha parte favorita desse artigo, e na mais
            complexa/avan√ßada, aquela que n√£o te contam quando voc√™ pergunta a
            diferen√ßa entre type vs interface, citarei o termo &apos;Higher
            Kinded Types&apos;, mas n√£o explicarei com profundidade o que s√£o,
            esse √© um tema que merece um artigo especial s√≥ pra ele.
          </p>
          <p>
            Outra diferen√ßa importante que pode fazer toda a diferen√ßa na
            escolha entre interfaces e types √© que interfaces podem usar o tipo
            &apos;this&apos; na defini√ß√£o de retorno de fun√ß√µes/m√©todos e tamb√©m
            em suas propriedades, enquanto types n√£o t√™m essa capacidade.
          </p>
          <TypeWithThis />
          <p>
            O caso de uso mais comum √© a utiliza√ß√£o do pattern&nbsp;
            <Link
              href="https://www.sitepoint.com/javascript-like-boss-understanding-fluent-apis/"
              target="_blank"
              className="underline underline-offset-4"
            >
              fluent api
            </Link>
            , que √© uma maneira de deixar seu c√≥digo mais leg√≠vel e f√°cil de
            entender, encadeando m√©todos de uma forma que pare√ßa uma frase ou
            uma s√©rie de instru√ß√µes.
          </p>
          <FluentApiWithInterface />
          <p>
            Com &apos;this&apos; tamb√©m podemos criar mixins, que s√£o
            classes/objetos que cont√™m m√©todos para outras classes/objetos,
            permitindo a adi√ß√£o de funcionalidade sem usar heran√ßa.
          </p>
          <MixinsWithInterface />

          <p>
            Tamb√©m podemos utilizar o &apos;this&apos; em propriedades da
            interface, observemos o comportamento abaixo:
          </p>

          <ThisInProperty />

          <p>
            Isso faz com que a propriedade &apos;fullName&apos; seja do tipo
            string, assim como foi definido em name.
          </p>

          <p>
            O que √© interessante mas in√∫til, certo? Daria pra manualmente tipar
            a propriedade &apos;fullName&apos; como string, ou at√© mesmo
            referenciar a pr√≥pria interface, qual a vantagem do
            &apos;this&apos;?
          </p>

          <ManuallyTypingProperty />

          <p>
            Antes, precisamos relembrar um comportamento existente com o tipo
            unknown: ao ser interseccionado com algum outro tipo, o resultado √©
            sempre o tipo interseccionado, isto √©:
          </p>

          <UnknownAndIntersections />

          <p>
            A grande vantagem vem ao combinar o comportamento do
            &apos;this&apos; e unknown + extends, o &apos;this&apos; sempre
            referencia o √∫ltimo tipo na cadeia de extens√µes, e qualquer tipo
            interseccionado com unknown se resolve nele mesmo, permitindo a
            constru√ß√£o disso:
          </p>

          <ThisAndUnknown />

          <p>
            A propriedade &apos;values&apos; √© do tipo unknown na interface
            &apos;User&apos;, j√° na interface &apos;Admin&apos; ela passa a ser
            number, j√° que a propriedade &apos;age&apos; se tornou number.
          </p>

          <p>
            E √© esse comportamento que bibliotecas aproveitam pra construir
            Higher Kinded Types, Embora TypeScript n√£o suporte diretamente
            Higher Kinded Types (HKTs), que s√£o comuns em linguagens como
            Haskell e Scala, √© assim que podemos fazer para simular alguns
            desses comportamentos.
          </p>

          <p className="text-start">
            Higher Kinded Types (HKTs) s√£o tipos que operam sobre outros tipos.
            Enquanto um tipo normal pode ser&nbsp;
            <span className="text-highlight">string</span>
            &nbsp;ou&nbsp;
            <span className="text-highlight">number</span>, e um tipo gen√©rico
            pode ser algo como&nbsp;
            <span className="text-highlight">{"Array<T>"}</span>&nbsp;ou&nbsp;
            <span className="text-highlight">{"Promise<T>"}</span>, um higher
            kinded type seria algo como&nbsp;
            <span className="text-highlight">{"F<T>"}</span>&nbsp;onde&nbsp;
            <span className="text-highlight">F</span>&nbsp;√© um tipo de tipo, ou
            seja, √© a abstra√ß√£o da abstra√ß√£o da abstra√ß√£o üòÖ.
          </p>

          <p>Os tipos podem ser categorizados por ordem/n√≠vel:</p>

          <ul className="list-disc pl-10 flex flex-col gap-4">
            <li>
              <p>
                Tipos de primeira ordem: s√£o tipos simples como&nbsp;
                <span className="text-highlight">string</span>,&nbsp;
                <span className="text-highlight">number</span>,&nbsp;
                <span className="text-highlight">boolean</span>, etc.
              </p>
            </li>
            <li>
              <p className="text-start">
                Tipos parametrizados (ou gen√©ricos): s√£o tipos que recebem
                outros tipos como par√¢metros, como&nbsp;
                <span className="text-highlight">{"Array<T>"}</span>,&nbsp;
                <span className="text-highlight">{"Promise<T>"}</span>,&nbsp;
                <span className="text-highlight">{"Map<K, V>"}</span>, etc.
              </p>
            </li>

            <li>
              <p>
                Higher kinded types (HKTs): s√£o &apos;tipos de tipos&apos; ou
                &apos;construtores de tipos&apos;. Eles n√£o s√£o tipos completos
                por si s√≥, mas precisam de outros tipos para formar um tipo
                completo
              </p>
            </li>
          </ul>

          <p>Analogamente, isso seria: </p>

          <ul className="list-disc pl-10 flex flex-col gap-4">
            <li>
              <p>
                Um tipo normal √© como um valor (ex: 5 ou &apos;hello&apos;).
              </p>
            </li>
            <li>
              <p>
                Um tipo gen√©rico √© como uma fun√ß√£o que recebe valores&nbsp;
                <var>f</var>
                <var>(x)</var> = <var>x</var> + 1&nbsp;.
              </p>
            </li>

            <li>
              <p>
                Um higher kinded type √© como uma fun√ß√£o que recebe fun√ß√µes
                &nbsp;
                <var>g</var>
                <var>(f)</var> = <var>f</var>
                <var>(f(x))</var>&nbsp;
              </p>
            </li>
          </ul>

          <p>
            Por ser deveras um tema mais avan√ßado e complexo, tamb√©m por ser
            algo mais nichado (poucas pessoas precisar√£o usar isso na vida, j√°
            que o uso √© mais comum em bibliotecas), e dado o tamanho desse
            artigo, irei parar por aqui e deixar sua curiosidade lhe guiar, caso
            queira se aprofundar e ver exemplos de casos de uso disso na
            pr√°tica, recomendo que veja o c√≥digo da biblioteca{" "}
            <Link
              href="https://github.com/Effect-TS/effect/blob/main/packages/effect/src/HKT.ts"
              className="underline underline-offset-4"
              target="_blank"
            >
              effect
            </Link>
            &nbsp;e leia esse&nbsp;
            <Link
              href="https://dev.to/effect/encoding-of-hkts-in-typescript-5c3"
              className="underline underline-offset-4"
              target="_blank"
            >
              artigo
            </Link>
            &nbsp;do pr√≥prio mantenedor da biblioteca falando sobre HKTs.
          </p>

          <p>
            Est√° tudo bem se voc√™ n√£o tiver entendido esse √∫ltimo t√≥pico, falha
            minha, j√° que eu ainda n√£o consigo simplificar esse tema ao ponto de
            trazer um exemplo bem simpl√≥rio que lhe fa√ßa entender a utilidade,
            usu√°rios comuns tendem a n√£o esbarrar nesse tipo de problema, ent√£o
            talvez voc√™ n√£o deva se preocupar tanto com isso, como eu havia
            dito, um artigo especialmente sobre o assunto √© necess√°rio, e isso
            vai ficar pra uma pr√≥xima.
          </p>

          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[9].href}
          >
            {navigationItems[9].title}
          </h4>
          <p>Dito tudo isso, e agora? Devo usar type ou interface?</p>
          <p>
            Depende üòÅ, brincadeiras a parte, existem algumas abordagens que
            voc√™ pode adotar:
          </p>
          <ul className="list-disc pl-10 flex flex-col gap-4">
            <li>
              <p>
                Seguir a{" "}
                <Link
                  href="https://www.typescriptlang.org/docs/handbook/2/everyday-types.html#differences-between-type-aliases-and-interfaces"
                  target="_blank"
                  className="underline underline-offset-4"
                >
                  recomenda√ß√£o
                </Link>{" "}
                do time do TypeScript, que √© utilizar interface at√© que voc√™
                precise de features de type.
              </p>
            </li>
            <li>
              <p>
                O contr√°rio disso, que √© utilizar type at√© que voc√™ precise de
                features de interface.
              </p>
            </li>
            <li>
              <p>
                E, por fim, utilizar sempre interface para definir objetos, e
                type para todo o resto.
              </p>
            </li>
          </ul>

          <p>
            Se voc√™ estiver construindo uma biblioteca, sugiro que sempre pense
            primeiro em interface para definir objetos, por causa do seu
            comportamento de declaration merging, permitindo que usu√°rios da sua
            biblioteca estendam a interface, mas lembre-se que talvez seus
            usu√°rios n√£o precisem disso, vai depender da API que voc√™ est√°
            construindo.
          </p>

          <h4
            className="opacity-100 mt-3 mb-2 text-xl lg:text-2xl text-start"
            id={navigationItems[10].href}
          >
            {navigationItems[10].title}
          </h4>
          <p>
            Primeiramente, muito obrigado por acompanhar at√© aqui, eu espero de
            verdade que voc√™ tenha aprendido algo novo e saia desse artigo
            sabendo qual deve usar ou n√£o, particularmente, eu alterno entre a
            2¬∞ e a 3¬∞ op√ß√£o. Se voc√™ achou esse artigo √∫til, compartilhe com
            algu√©m, se voc√™ tiver alguma d√∫vida, pode me mandar dm no twitter ou
            no discord (alvseven). Se notou algo de errado, um ponto de
            corre√ß√£o, algum detalhe que faltou, por favor n√£o hesite em me
            contatar.
          </p>

          <p>
            E pra finalizar, talvez eu tenha mentido, tamb√©m √© poss√≠vel definir
            fun√ß√µes com interfaces, mas √© algo n√£o t√£o idiom√°tico e na maioria
            dos casos voc√™ vai encontrar defini√ß√µes de fun√ß√µes utilizando a
            keyword type, se voc√™ voltar no primeiro ponto do artigo, ver√° que
            eu disse que nem sempre a keyword type existiu, dessa forma, era
            comum definir fun√ß√µes com interface, vide exemplo abaixo:
          </p>

          <FunctionsWithInterface />
        </article>
      </main>
      
      <AsideNavigationMenu activeItemIndex={activeItemIndex} navigationItems={navigationItems} />
      <JsonLd
        data={{
          "@context": "https://schema.org",
          "@type": "TechArticle",
          headline: "TypeScript: Type vs Interface - Uma An√°lise Profunda",
          description:
            "Descubra as diferen√ßas entre types e interfaces no TypeScript com exemplos pr√°ticos.",
          author: {
            "@type": "Person",
            name: "Alves",
            url: "https://alvseven.com",
          },
          publisher: {
            "@type": "Organization",
            name: "Alvseven",
            logo: {
              "@type": "ImageObject",
              url: "https://www.alvseven.com/icon.ico",
            },
          },
          datePublished: articleMeta.createdAt,
          dateModified: articleMeta.createdAt,
          image: articleMeta.coverImage,
        }}
      />
    </>
  );
}
